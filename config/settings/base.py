"""
Django settings for cpmonitor project.

Generated by 'django-admin startproject' using Django 4.1.6.

Then eddited to follow the two scoops of django advice.

Concretely this file contains only the base config.
Local development specific settings are in local.py.
Production specific settings are in production.py

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

from django.core.exceptions import ImproperlyConfigured


def get_env(var: str) -> str:
    try:
        return os.environ[var]
    except KeyError:
        raise ImproperlyConfigured(f"Set {var} environment variable")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/


ALLOWED_HOSTS = [".localzero.net", "localhost", "127.0.0.1"]

# Application definition

INSTALLED_APPS = [
    "cpmonitor.apps.MyAdminConfig",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "treebeard",
    "martor",
    "rules.apps.AutodiscoverRulesConfig",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # "invitations", We do not use invitations.Invitation and therefore do not want its migrations.
    "cpmonitor.apps.CpmonitorConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

AUTHENTICATION_BACKENDS = (
    "rules.permissions.ObjectPermissionBackend",
    "django.contrib.auth.backends.ModelBackend",
)

ROOT_URLCONF = "cpmonitor.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "cpmonitor" / "templates",
            BASE_DIR / "cpmonitor" / "templates" / "overrides",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db" / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "de-de"

TIME_ZONE = "Europe/Berlin"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "cpmonitor" / "static",
    ("apexcharts", os.path.join(BASE_DIR, "node_modules", "apexcharts", "dist")),
    ("jquery", os.path.join(BASE_DIR, "node_modules", "jquery", "dist")),
    ("tabler", os.path.join(BASE_DIR, "node_modules", "@tabler", "core", "dist")),
    ("tabler-icons", os.path.join(BASE_DIR, "node_modules", "@tabler", "icons")),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Martor (markdown editor)
MARTOR_ENABLE_CONFIGS = {
    "emoji": "true",
    "imgur": "true",
    "mention": "false",
    "jquery": "true",
    "living": "false",
    "spellcheck": "false",
    "hljs": "true",
}

# Image location for the dev server:
MEDIA_ROOT = BASE_DIR / "cpmonitor" / "images"
MEDIA_URL = "images/"

MARTOR_UPLOAD_PATH = "uploads/"
MARTOR_UPLOAD_URL = "/api/uploader/"
MAX_IMAGE_UPLOAD_SIZE = 104857600  # 100 MB

MARTOR_MARKDOWN_EXTENSIONS = [
    "markdown.extensions.extra",
    "markdown.extensions.nl2br",
    "markdown.extensions.smarty",
    "markdown.extensions.fenced_code",
    "markdown.extensions.sane_lists",
    "martor.extensions.urlize",
    "martor.extensions.del_ins",
    "martor.extensions.mention",
    "martor.extensions.emoji",
    "martor.extensions.mdx_video",
    # 'martor.extensions.escape_html',  # remove the extension to be able to use html in martor fields
]

# django-allauth configuration:
# https://django-allauth.readthedocs.io/en/latest/configuration.html
# Most customization is done in the adapter:
ACCOUNT_ADAPTER = "cpmonitor.adapters.AllauthInvitationsAdapter"
# django-allauth needs allauth.socialaccount to really work, but we don't use its OAuth parts
SOCIALACCOUNT_PROVIDERS = {}
ACCOUNT_EMAIL_VERIFICATION = "none"  # Would need a working email config.

# django-invitations configuration:
# https://django-invitations.readthedocs.io/en/latest/configuration.html
# django-invitations is closely coupled to django-allauth and uses
# the same adapter.
INVITATIONS_ADAPTER = "cpmonitor.adapters.AllauthInvitationsAdapter"
# To couple an invitation to a city and access right (either admin or editor)
# a custom model is needed. To prevent `invitations.Invitation` from being
# used, django-invitations does not appear in `INSTALLED_APPS` above.
INVITATIONS_INVITATION_MODEL = "cpmonitor.Invitation"
INVITATIONS_GONE_ON_ACCEPT_ERROR = False
INVITATIONS_INVITATION_ONLY = True
# In order to use our custom view instead of the one from django-invitations,
# `invitations.urls` could not be used. This parameters default value points
# to that and had to be replaced by our own:
INVITATIONS_CONFIRMATION_URL_NAME = "accept-invite"
# Setting this to true would cause a signal handler to be installed, which
# would try to access the email field of an invitation and fail on the custom model.
INVITATIONS_ACCEPT_INVITE_AFTER_SIGNUP = False

# django core configuration used by django-invitations, django-allauth
LOGIN_URL = "/admin/login/"
LOGIN_REDIRECT_URL = "/admin/"
