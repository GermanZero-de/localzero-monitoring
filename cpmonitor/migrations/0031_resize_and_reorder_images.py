# Generated by Django 4.1.7 on 2023-09-09 13:17

from datetime import datetime
from django.db import migrations, models
from django.conf import settings
from pathlib import Path
import os
import shutil

from PIL import Image, UnidentifiedImageError


def resize_and_reorder_images(apps, schema_editor):
    upload_path = Path(settings.MEDIA_ROOT) / "uploads"

    if not os.path.exists(upload_path):
        return

    # backup
    backup_path = str(upload_path) + "-backup-migration-0030"
    if os.path.exists(backup_path):
        shutil.rmtree(backup_path)
    shutil.copytree(upload_path, backup_path)

    # resize images
    for basedir, _, files in os.walk(upload_path):
        for file in files:
            img = Image.open(Path(basedir) / file)
            size = 1000 if basedir.split("/").pop() == "local_groups" else 2000
            if img.width > size or img.height > size:
                img.thumbnail((size, size))
                img.save(Path(basedir) / file)

    # merge local_group files into date folder structure
    now = datetime.now()
    target_folder = upload_path / "2023" / "09" / "01"
    os.makedirs(target_folder, exist_ok=True)
    if os.path.exists(upload_path / "local_groups"):
        for img_file in os.listdir(upload_path / "local_groups"):
            shutil.move(upload_path / "local_groups" / img_file, target_folder)
        shutil.rmtree(upload_path / "local_groups")

    # update local_group paths in database
    LocalGroup = apps.get_model("cpmonitor", "LocalGroup")
    db_alias = schema_editor.connection.alias
    for local_group in LocalGroup.objects.using(db_alias).all():
        local_group.featured_image = (
            "uploads/2023/09/01/" + local_group.featured_image.path.split("/").pop()
        )
        local_group.save()


def revert_resize_and_reorder_images(apps, schema_editor):
    upload_path = Path(settings.MEDIA_ROOT) / "uploads"

    if not os.path.exists(upload_path):
        return

    backup_path = str(upload_path) + "-backup-migration-0030"
    if not os.path.exists(backup_path):
        raise migrations.exceptions.IrreversibleError(
            "backup does not exist, cannot revert"
        )

    # restore files
    shutil.rmtree(upload_path)
    shutil.move(str(upload_path) + "-backup-migration-0030", upload_path)

    # revert local_group paths in database
    LocalGroup = apps.get_model("cpmonitor", "LocalGroup")
    db_alias = schema_editor.connection.alias
    for local_group in LocalGroup.objects.using(db_alias).all():
        local_group.featured_image = (
            "uploads/local_groups/" + local_group.featured_image.path.split("/").pop()
        )
        local_group.save()


class Migration(migrations.Migration):
    dependencies = [
        (
            "cpmonitor",
            "0030_administrationchecklist_climate_protection_management_exists_rationale_and_more",
        ),
    ]

    operations = [
        migrations.AlterField(
            model_name="localgroup",
            name="featured_image",
            field=models.ImageField(
                blank=True,
                upload_to="uploads/%Y/%m/%d/",
                verbose_name="Bild der Lokalgruppe",
            ),
        ),
        migrations.RunPython(
            resize_and_reorder_images, revert_resize_and_reorder_images
        ),
    ]
